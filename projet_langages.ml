	(* Représentation des automates non-déterministes *)
type etatN = {acceptN : bool ; tN : char -> int list};;
		
type afn = {sigmaN: char list; (* l'alphabet *)
			nN: int; (* Q est l'ensemble {1..N} *)
			initN: int list; (* les états initiaux *)
			eN : int -> etatN};;
			
			
exception  PasTransition ;;

let transitN = fun (aut, i, c) ->
	try (aut.eN(i)).tN(c) 
	with Match_failure _-> raise PasTransition;;


(*  initialiser le nombre  d'etats ainsi que l'etat acceptant  *)
let rec longueur = function 
("")->0
|(m)->1+longueur(String.sub m 1(String.length m -1) );;

(* val longueur : string -> int = <fun> *) 

	
longueur "abc";; (*- : int = 3 *)

let autoVide  (sigma:char list) (w:string) = let l = longueur w +1 in  {sigmaN= sigma ; nN = l; initN =[1] ; 
			eN = function
			(1)->{acceptN=false ;tN=function(_)->[1]}
			|(etats)-> if etats=l then 	{acceptN=true ;tN=function(_)-> raise PasTransition}
						else {acceptN=false ;tN=function(_)-> raise PasTransition}

				};;
(* val autoVide : afn -> afn = <fun> *)




let alp=['a';'b';'c'];;

let an1=autoVide alp "abb";;


(an1.eN(1)).acceptN ;;(* - : bool = false *)
(an1.eN(2)).acceptN ;;(*- : bool = false  *)
(an1.eN(3)).acceptN ;;(* - : bool = false *)
(an1.eN(4)).acceptN ;;(* - : bool = true *)

(an1.eN(1)).tN('a') ;;(* - : int list = [1] *)
(an1.eN(1)).tN('b') ;;(* - : int list = [1] *)
(an1.eN(1)).tN('c') ;;(* - : int list = [1] *)
(an1.eN(2)).tN('a') ;;(* Exception: PasTransition. *)
 
let rec creetransition (i:int) = function (* i est l'indice du premier etat *)
("")->[]
|((s:string))-> (i,s.[0],(i+1))::creetransition (i+1) (String.sub s 1(String.length s -1));;


(*val creetransition : int -> string -> (int * char * int) list = <fun> *) 

creetransition 1 "abb";;


let rajouteUne (a: afn) ((q , c , p) : (int * char * int)) = {sigmaN= a.sigmaN;
															nN = a.nN; initN = a.initN;
																eN = function
																	etat -> if etat = q then {acceptN = (let z = a.eN(q) in z.acceptN );
																											tN = (function
																														car -> if car = c then let z = a.eN(q) in ( try let x=z.tN(c) in
																																									[p]@x with _ -> [p])
																																else let z = a.eN(q) in z.tN(car) )}
																			else a.eN(etat) } ;;

(an1.eN(4)).acceptN ;;(* - : bool = true *)
let test= rajouteUne an1 (1,'a',2);;

(test.eN(4)).acceptN ;;

let rec rajoutePlusieurs (an:afn) = function
(((i:int),(lettre:char),(j:int))::liste)-> rajoutePlusieurs (rajouteUne an (i,lettre,j)) liste
|_->an;;


let creeUnAutomate  (sigma:char list) (w:string)  = rajoutePlusieurs (autoVide sigma  w ) (creetransition 1 w) ;;


let anAbb=creeUnAutomate alp "abb";;


(anAbb.eN(1)).tN('a') ;;(* - : int list = [2; 1] *)
(anAbb.eN(1)).tN('b') ;;(* - : int list = [1] *)
(anAbb.eN(1)).tN('c') ;;(* - : int list = [1] *)
(anAbb.eN(2)).tN('a') ;;(* Exception: PasTransition. *) 
(anAbb.eN(2)).tN('b') ;;(*- : int list = [3] *)
(anAbb.eN(3)).tN('b') ;;(* - : int list = [4] *)
(anAbb.eN(4)).tN('b') ;;(* Exception: PasTransition. *)
(anAbb.eN(4)).acceptN ;;(* - : bool = true *)

(*recherche dans un afn *)

let string_of_char = String.make 1 ;;

let tetec = function
| "" -> failwith "Erreur : chaine vide"
| s -> s.[0] ;;
(* val tetec : string -> char = <fun> *)

let tetes = fun s -> string_of_char (tetec(s));;

let reste = function 
| "" -> failwith "Erreur : chaine vide"
| s -> String.sub s 1  ((String.length s) - 1 ) ;;
(* val reste : string -> string = <fun> *)


(an1.eN(2)).tN 'b';;
(* - : int list = [2; 3] *)

(* Fait passer une liste d'état à l'état suivant en fonction d'une lettre et d'un afn *)

let rec change_etat = function
	(x::l,a,c)-> (try ((a.eN(x)).tN c) with PasTransition ->[])@change_etat(l,a,c)
	|([],_,_)->[];;
(* val change_etat : int list * afn * char -> int list = <fun> *)
	
change_etat([1;2;3],an1,'a');;
(* - : int list = [2; 2; 2] *)
change_etat([1;2;3],an1,'b');;
(* - : int list = [2; 3; 3] *)

(an1.eN(2)).acceptN;;
(* - : bool = true *)

(* Vérifie si un état acceptant est présent dans la liste *)

let rec est_accept = function
	(a::l,af)->(af.eN(a)).acceptN || est_accept(l,af)
	|([],_)->false;;
(* val est_accept : int list * afn -> bool = <fun> *)

est_accept([1;2;3],an1);;
(* - : bool = true *)


let rec parcours (an:afn) (etats:int list) (c:string) = match c with
	""->false
	|m->let new_etats=change_etat(etats,an,tetec(m)) in
			if(est_accept(new_etats,an)) then true 
			else (parcours an new_etats (reste(m)));;


let recherche   (an:afn)  (c:string) =  parcours an [1] c ;;



parcours anAbb [1] "abbbbcbab";;  (*- : bool = true*)

parcours anAbb [1] "abcbcbbcbab";; (*- : bool = false*)


(*******************************************Partie deter ************************************************************)

(* ----------------------- Bibliothèque sur les listes -------------------------- *)
let rec appartient = function 
(a,b::l)-> if a=b then true else appartient(a,l)
|(_,[])-> false;;
(*appartient : 'a * 'a list -> bool = <fun>*)

let rec union l = function 
(a::l2)-> if appartient(a,l) then union l l2 else a:: (union l l2)
| []->l;;
(*union : 'a list -> 'a list -> 'a list = <fun>*)

let rec enleve a = function
 x::q -> if x = a then q else x::(enleve a q)
 | [] -> [] ;;

let rec intersection l1 = function
	| [] -> []
	| a :: l2 -> if appartient(a,l1) then a::(intersection (enleve a l1) l2) else intersection l1 l2 ;;

let rec long = function
(_::l)->1+long(l)
|[]-> 0;;


(* -------------------- RAPPELS ------------------ *)

														
(* Représentation d'un automate déterministe *)
type etat = {accept : bool ; t : char -> int};;
 
type afd = {sigma : char list ; (* l'alphabet *)
			n : int ; (* Q est l'ensemble des états de 1 à n *)
			init : int ; (* l'état initial *)
			e : int -> etat};;
							


			
(* Fonctions de transition *)


let transitN = function (aut, i, c) ->
	try (aut.eN(i)).tN(c) 
	with Match_failure _-> raise PasTransition;;
	
(* Liste des états Acceptants *)
let etatsAcceptants auto = 
	let rec auxi auto = function 
		| 0 -> []
		| i -> if (auto.eN(i)).acceptN then i::(auxi auto (i-1)) else auxi auto (i-1) 
	in auxi auto (auto.nN) ;;
(* val etatsAcceptants : afn -> int list = <fun> *)


(* Exemple du TP *)

let an1  = {sigmaN= ['a';'b'] ; nN = 3; initN = [1] ; 
			eN = function	
			    1 -> {acceptN = false ;
				      tN = function 
					       'a'->[1;2]
						   |'b'-> [1]}
				|2 -> {acceptN = false ;
				      tN = function  
						   'b'-> [3] }		   
				|3 -> {acceptN = true ;
				      tN = function 
					       'a'->[3]
						   |'b'->[3]   }	
				
		};;

(* Engendré l'ensemble des parties non vide de 1,...,n *)				
let rec aux  x = function
	| [] -> []
	| a :: q -> (x::a) :: (aux x q) ;;
		
let rec parties = function
	| 0 -> [[]]
	| n -> parties(n-1)@( aux n (parties(n-1))) ;;

let rec enleve = function 
	| [] -> []
	| x :: q -> if long(x) = 0 then q else x :: (enleve q) ;;
	

(* Trier les listes *)	
let rec insere x = function 
	| [] -> [x] 
	| a :: q -> if x < a then x :: a ::q else a :: (insere x q) ;;

let rec tri = function 
	| [] -> []
	| x :: q -> insere x (tri q) ;;
	
(*Multi-tri*)	
let rec multi_tri = function
	| [] -> []
	| x :: q -> (tri x)::(multi_tri q) ;;
	

(* Finalement, la liste des nouveaux états de l'automate : *)

let nouveauxetats = function n -> multi_tri (enleve(parties n)) ;;
(*val nouveauxetats : int -> int list list = <fun> *)


 nouveauxetats 3 ;;
(*- : int list list = [[1]; [2]; [1; 2]; [3]; [1; 3]; [2; 3]; [1; 2; 3]] *)

exception PasdeListe;;
let rec cherchePosition etat  = function 
(a::l)-> if a=etat then 1 else 1+ cherchePosition etat l 
|_-> raise PasdeListe;;
(* val quiEstEnPosition : 'a -> 'a list -> int = <fun> *)


cherchePosition [3] ( nouveauxetats 3);;

let rec quiEstALaPosition (i:int) = function 
(a::l)-> if i=1 then a else quiEstALaPosition (i-1) l
|_->raise PasdeListe ;;

(* val quiEstALaPosition : int -> 'a list -> 'a = <fun> *)

quiEstALaPosition 3 (nouveauxetats 3);;(*  - : int list = [3] *)

quiEstALaPosition 8 (nouveauxetats 3);;(*  Exception: Failure "pas dans la liste". *)

let rec transitN_list (an:afn) (liste:int list) (c:char)=match liste with
(a::l)-> (try let test=transitN(an,a,c) in  (union(test) (transitN_list an l c)) with 
			PasTransition -> transitN_list an l c)
			
|_->[];;         
(* val transitN_list : afn -> int list -> char -> int list = <fun> *)

transitN_list an1 [1;3] 'a';;
(* - : int list = [3; 1; 2] *)
transitN_list an1 [1;2] 'a';;

(* Construction d'un afd d'apres un afn  *)

let an2  = {sigmaN= ['a';'b';'c'] ; nN = 4; initN = [1] ; 
			eN = function	
			    1 -> {acceptN = false ;
				      tN = function 
					       'a'->[1;2]
						   |'b'-> [1]
						   |'c'-> [1]}
				|2 -> {acceptN = false ;
				      tN = function  
						   'b'-> [3] }		   
				|3 -> {acceptN = false ;
				      tN = function 
					       'b'->[4] }
				|4 ->{acceptN = true  ;
				      tN = function 
					       _-> raise PasTransition}	
				
		};;

long(nouveauxetats 4);;
cherchePosition [1;2] (nouveauxetats 4);;


let rec contientA (an:afn) = function
	(a::l)-> (an.eN(a)).acceptN || contientA an l
	|([])->false;;

let rec vaChercher (an:afn) (c:char) = function
	(a::l)->(try ( union ((an.eN(a)).tN(c)) (vaChercher an c l) ) with Match_failure _->vaChercher an c l
																		|(PasTransition)->vaChercher an c l)

	|[]->[];;


vaChercher an2 'a' [1;2];;
let cherche (an:afn) (c:char) (l:int list) = tri (vaChercher an c l);; 


let autoDet (aut:afn) = 
	let parties = nouveauxetats aut.nN in
		let taille = long(parties) in


	{sigma = aut.sigmaN ; (* l'alphabet *)
			n = taille ; (* Q est l'ensemble des états de 1 à n *)
			init = cherchePosition aut.initN parties; (* l'état initial *)
			e = function 
			(etat) -> let listEtat = (quiEstALaPosition etat  parties ) in   {accept =(contientA aut listEtat)  ;
						 t = function 
						 (etat)-> try  (cherchePosition ( cherche aut etat listEtat )  parties) with  PasdeListe -> -1 
						
						


			} };;



let an3 = autoDet an2 ;;

(an3.e(1)).t('a');;
(an3.e(3)).t('a');;
(an3.e(3)).t('b');;
(an3.e(3)).t('c');;

let rec afficheAutD (an:afd) (parties:  int list list) = function 
(1)-> [((quiEstALaPosition 1  parties),1,(an.e(1)).accept,(an.e(1)).t('a'),(an.e(1)).t('b'),(an.e(1)).t('c'))]
|(n)->[((quiEstALaPosition n  parties),n,(an.e(n)).accept,(an.e(n)).t('a'),(an.e(n)).t('b'),(an.e(n)).t('c'))] @ (afficheAutD (an) (parties) (n-1));; 

let parties = nouveauxetats 4;;
afficheAutD an3 parties 15 ;;



							(*Recherche dans un afn *)

let rec conversion = function 
("")->[]
|(m)->m.[0]::conversion(String.sub m 1(String.length m -1) );;
(* val conversion : string -> char list = <fun> *)

let rec accept_mot= function
(a1,a::l,q)-> accept_mot(a1,l,(a1.e(q)).t(a))
|(a1,[],q)-> (a1.e(q)).accept;; 
 
let rec accepte_mot= function
(a1,a::l,q)-> (try  accept_mot(a1,l,(a1.e(q)).t(a)) with 
				     PasTransition-> false )
|(a1,[],q)-> (a1.e(q)).accept;;

 (* val accept_mot : afd * char list * int -> bool = <fun> *)

let rechercheD   (an:afd)  (c:string) =  accepte_mot( an,conversion(c) ,an.init)   ;;

(*************Generation d'adn aleatoire ******************)
let genelettre = function 
(0)-> "A"
|(1)-> "C"
|(2)-> "G"
|(3)-> "T";;


(*val genelettre : int -> string = <fun>*)
 
let rec geneAdn = function
(0)->""
|(n)->genelettre(Random.int(4))^geneAdn(n-1);;

(* val geneAdn : int -> string = <fun> *) 
let t1=Sys.time();; 
let adnale = geneAdn(10000);;
let t2=Sys.time();;
t2-.t1;; 
(*- : float =  0.285000000000025 *)





(******************************************TEST*********************************************************)
let adnAlph=['A';'C';'G';'T'];;
(*15000 lettres*)
let adn




let sequence="GTTTTTTTT";;
let t1=Sys.time();;
let testAdn= creeUnAutomate adnAlph sequence;;
let t2=Sys.time();;
t2-.t1;;
(* - : float = 0.0070000000000050022*)

let t1=Sys.time();;
recherche  testAdn adn;;
(* - : bool = true *) 
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.20500000000001251 *)


let t1=Sys.time();;
let autDer= autoDet testAdn;;
let t2=Sys.time();;
t2-.t1;; 
(*- : float =  0.01099999999999568 *)



let t1=Sys.time();;
rechercheD  autDer adn;;
(* - : bool = true *) 
let t2=Sys.time();;
t2-.t1;; 
(*- : float = 0.103999999999985 *) 

(* Recheche du mot vide *)

let sequence="";;
let t1=Sys.time();;
let testAdn= creeUnAutomate adnAlph sequence;;
let t2=Sys.time();;
t2-.t1;;



let t1=Sys.time();;
let autDer= autoDet testAdn;;
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.0059999999999718057 *)



let t1=Sys.time();;
recherche  testAdn adn;;
(* - : bool = false *) 
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.064000000000078217 *)





let t1=Sys.time();;
rechercheD  autDer adn;;
(* - : bool = false *) 
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.070000000000050022 *)

(* Recheche d'un long mots *)

(* longueur 17 si plus la determinisation ne fonctionne plus  *)
let sequence="GGGGGGGGTTTTTTTT";;
let t1=Sys.time();;
let testAdn= creeUnAutomate adnAlph sequence;;
let t2=Sys.time();;
t2-.t1;;
(* - : float = 0.0060000000000002274 *)


let t1=Sys.time();;
let autDer= autoDet testAdn;;
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.47200000000000841 *)



let t1=Sys.time();;
recherche  testAdn adn;;
(* - : bool = true *) 
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.22700000000000387 *)




let t1=Sys.time();;
rechercheD  autDer adn;;
(* - : bool = true *) 
let t2=Sys.time();;
t2-.t1;; 
(* - : float = 0.36599999999998545 *)



